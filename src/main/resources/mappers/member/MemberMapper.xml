<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.wing.member">

    <resultMap type="memberVo" id="memberResultMap">
        <id column="MEMBER_NO" property="memberNo" />
        <result column="EMAIL" property="email" />
        <result column="USER_NAME" property="userName" />
        <result column="PWD" property="pwd" />
        <result column="CRE_DATE" property="creDate"
                javaType="java.util.Date" />
        <result column="MOD_DATE" property="modDate"
                javaType="java.util.Date" />
        <result column="PHONE" property="phone" />
        <result column="GRADE" property="grade" />
        <result column="YEARLY_SALARY" property="yearlySalary" />
        <result column="MONTH_SALARY" property="monthlySalary" />
        <result column="QUIT_APPLY" property="quitApply" />
        <result column="PRODUCT_PURCHASE" property="productPurchase" />
        <result column="IS_DELETED" property="isDeleted"/>
        <!-- 추가하려는 컬럼들 -->
        <result column="SELLING_DATE" property="sellingDate" javaType="java.util.Date" />
        <result column="TERMINATION_DATE" property="terminationDate" javaType="java.util.Date" />
        <result column="CARD_NAME" property="cardName" />
        <result column="TERMINATION_REASON" property="terminationReason" />
        <result column="ACCOUNT_BOOK_COUNT" property="accountBookCount" />
        <result column="POST_COUNT" property="postCount" />
        <result column="MEMBER_CARD_NO" property="memberCardNo" />
    </resultMap>


    <select id="selectMemberByEmail" parameterType="String" resultMap="memberResultMap">
        SELECT MEMBER_NO, USER_NAME, EMAIL
        FROM MEMBER
        WHERE EMAIL = #{email}
        AND IS_DELETED = 'false'
    </select>

    <select id="memberExist" parameterType="map"
            resultMap="memberResultMap">
        SELECT MEMBER_NO, USER_NAME, EMAIL, GRADE, IS_DELETED
        FROM MEMBER
        WHERE EMAIL = #{email}
        AND PWD = #{pwd}
    </select>

    <select id="memberSelectOne" parameterType="String" resultMap="memberResultMap">
        SELECT MEMBER_NO, EMAIL
        FROM MEMBER
        WHERE EMAIL = #{email}
        AND IS_DELETED = 'false'
    </select>

    <insert id="memberInsertOne" parameterType="memberVo">
        INSERT INTO MEMBER (MEMBER_NO, EMAIL, PWD, USER_NAME, PHONE, GRADE, YEARLY_SALARY, MONTH_SALARY)
        VALUES (MEMBER_NO_SEQ.NEXTVAL, #{email}, #{pwd}, #{userName}, #{phone}, #{grade}, #{yearlySalary}, #{monthlySalary})
    </insert>

    <!-- 관리자용 회원 전체 조회 쿼리 (페이징 적용) -->
    <select id="selectAllMembersForAdmin" parameterType="map" resultMap="memberResultMap">
    <![CDATA[
        SELECT MEMBER_NO, EMAIL, USER_NAME,CRE_DATE, PHONE, PRODUCT_PURCHASE, QUIT_APPLY
        FROM (
                 SELECT MEMBER_NO, EMAIL,USER_NAME, CRE_DATE, PHONE, PRODUCT_PURCHASE, QUIT_APPLY,
                        ROW_NUMBER() OVER ( ORDER BY   CASE WHEN QUIT_APPLY = 'Y' THEN 1 ELSE 2 END,  -- 'Y'인 경우 우선 순위
                            CRE_DATE DESC,   -- 'CRE_DATE' 기준으로 정렬
                            MEMBER_NO DESC ) AS RNUM
                 FROM MEMBER
                 WHERE GRADE = 'MEMBER' AND IS_DELETED='false'
             ) MEMBER_WITH_RNUM
        WHERE RNUM >= #{start} AND RNUM <= #{end}
        ORDER BY
            CASE WHEN QUIT_APPLY = 'Y' THEN 1 ELSE 2 END,
            CRE_DATE DESC
        ]]>
</select>



    <!-- 회원 상세 ID로 조회하는 쿼리 추후게시글 컬럼추가가능? -->
    <select id="selectMemberDetailForAdmin" parameterType="int" resultMap="memberResultMap">
        SELECT
            M.MEMBER_NO,
            M.EMAIL,
            M.USER_NAME,
            M.PHONE,
            M.CRE_DATE,
            M.QUIT_APPLY,
            M.YEARLY_SALARY,
            M.MONTH_SALARY,
            M.PRODUCT_PURCHASE,
            (SELECT COUNT(*) FROM ACCOUNT_BOOK AB WHERE AB.MEMBER_NO = M.MEMBER_NO) AS ACCOUNT_BOOK_COUNT,
            C.CARD_NAME,
            SC.SELLING_DATE,
            SC.TERMINATION_DATE,
            SC.MEMBER_CARD_NO,
            SC.TERMINATION_REASON
        FROM MEMBER M
                LEFT JOIN SELLING_CARD SC ON M.MEMBER_NO = SC.MEMBER_NO
                LEFT JOIN CARD C ON SC.CARD_NO = C.CARD_NO
        WHERE M.MEMBER_NO = #{memberNo}
    </select>

    <!-- 회원 전체 수 조회 쿼리 -->
    <select id="selectTotalMembersCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM MEMBER
        WHERE IS_DELETED='false'
    </select>

    <update id="adminSoftDeleteMember" parameterType="memberVo">
        UPDATE MEMBER
        SET  IS_DELETED='true'
        WHERE MEMBER_NO = #{memberNo}
    </update>

    <update id="updateMember" parameterType="memberVo">
        UPDATE MEMBER
        SET EMAIL = #{email},
            USER_NAME = #{userName},
            PWD = #{pwd},
            PHONE = #{phone}
        WHERE MEMBER_NO = #{memberNo}
    </update>
    <select id="updateMemberSelect" resultType="memberVo">
        select EMAIL,USER_NAME,PWD,PHONE
        FROM MEMBER
        WHERE MEMBER_NO = #{memberNo}
    </select>

    <!-- 관리자의 마이페이지 조회쿼리 -->
    <select id="selectAdminMypageInfo" parameterType="int" resultType="MemberVo">
        SELECT MEMBER_NO, EMAIL, USER_NAME, PWD, PHONE, CRE_DATE
        FROM MEMBER
        WHERE MEMBER_NO = #{memberNo} AND GRADE='ADMIN'
    </select>

    <!--여기서부턴 userMyPage-->
    <select id="selectMyPageInfo" parameterType="int" resultType="MemberVo">
        SELECT
            MEMBER_NO, EMAIL,USER_NAME AS userName, PWD,PHONE,CRE_DATE, MONTH_SALARY AS monthlySalary,YEARLY_SALARY,GRADE, MOD_DATE,
            PRODUCT_PURCHASE,QUIT_APPLY
        FROM MEMBER
        WHERE MEMBER_NO = #{memberNo}
    </select>

    <!-- 회원 정보 업데이트 쿼리 -->
    <update id="updateMemberInfo" parameterType="MemberVo">
        UPDATE MEMBER
        SET
        EMAIL = #{email},
        USER_NAME = #{userName},
        PWD = #{pwd},
        PHONE = #{phone},
        MONTH_SALARY = #{monthlySalary},
        YEARLY_SALARY = #{yearlySalary}
        WHERE MEMBER_NO = #{memberNo}
    </update>
    <select id="selectUpdatedMemberInfo" parameterType="int" resultType="MemberVo">
        SELECT MEMBER_NO, EMAIL, USER_NAME, PWD, PHONE, MONTH_SALARY, YEARLY_SALARY
        FROM MEMBER
        WHERE MEMBER_NO = #{memberNo}
    </select>
    <update id="updateMemberQuitApply"  parameterType="MemberVo">
        UPDATE MEMBER
        SET QUIT_APPLY='Y'
        WHERE MEMBER_NO = #{memberNo}
    </update>

    <!-- 카드 신청   -->
    <update id="updateMemberCardPurchase" parameterType="int">
        UPDATE MEMBER
        SET PRODUCT_PURCHASE = 'Y'
        WHERE MEMBER_NO = #{memberNo}
    </update>

    <!-- 카드 해지 -->
    <update id="updateMemberProductPurchase" parameterType="int">
        UPDATE MEMBER
        SET PRODUCT_PURCHASE = 'N'
        WHERE MEMBER_NO = #{memberNo}
    </update>

    <select id="checkMemberProductPurchase" parameterType="int" resultMap="memberResultMap">
        SELECT MEMBER_NO, PRODUCT_PURCHASE
        FROM MEMBER
        WHERE MEMBER_NO = #{memberNo}
    </select>

    <!-- 사용자의 소비 내역을 월급 그룹 내에서 백분율로 계산(마이페이지에서 사용)   -->
    <select id="getExpensePercentileByMonthlySalary" parameterType="int" resultType="int">
        <![CDATA[
        WITH salary_range AS (
            SELECT FLOOR(MONTH_SALARY / 100) * 100 AS LOWER_BOUND,
            FLOOR(MONTH_SALARY / 100) * 100 + 99 AS UPPER_BOUND
            FROM MEMBER
            WHERE MEMBER_NO = #{memberNo}
        ),
        same_salary_range_employees AS (
            SELECT M.MEMBER_NO
            FROM MEMBER M, salary_range SR
            WHERE M.MONTH_SALARY BETWEEN SR.LOWER_BOUND AND SR.UPPER_BOUND
            AND M.GRADE <> 'ADMIN'
        ),
        monthly_expenses AS (
            SELECT AB.MEMBER_NO,
            NVL(SUM(AB.PAYMENT_AMOUNT), 0) AS TOTAL_EXPENSE
            FROM ACCOUNT_BOOK AB
            JOIN same_salary_range_employees SSRE ON AB.MEMBER_NO = SSRE.MEMBER_NO
            WHERE EXTRACT(YEAR FROM AB.CRE_DATE) = EXTRACT(YEAR FROM SYSDATE)  -- 현재 연도
            AND EXTRACT(MONTH FROM AB.CRE_DATE) = EXTRACT(MONTH FROM SYSDATE)  -- 현재 월
            GROUP BY AB.MEMBER_NO
        ),
        expense_stats AS (
            SELECT
            COUNT(*) AS TOTAL_COUNT,
            MAX(TOTAL_EXPENSE) AS MAX_EXPENSE,
            MIN(TOTAL_EXPENSE) AS MIN_EXPENSE
            FROM monthly_expenses
        ),
        my_expense AS (
            SELECT TOTAL_EXPENSE AS MY_TOTAL_EXPENSE
            FROM monthly_expenses
            WHERE MEMBER_NO = #{memberNo}
        ),
        my_rank AS (
            SELECT
            COUNT(*) AS LOWER_OR_EQUAL_COUNT
            FROM monthly_expenses
            WHERE TOTAL_EXPENSE <= (SELECT MY_TOTAL_EXPENSE FROM my_expense)
        )
        SELECT
            COALESCE(
                    CASE
                        WHEN ES.TOTAL_COUNT = 0 THEN NULL
                        WHEN ES.MAX_EXPENSE = ES.MIN_EXPENSE THEN 50
                        ELSE
                            ROUND(GREATEST(0, LEAST(100, ((MR.LOWER_OR_EQUAL_COUNT - 1) / (ES.TOTAL_COUNT - 1)) * 100)))
                        END,
                    0
            ) AS EXPENSE_PERCENTILE
        FROM expense_stats ES, my_rank MR
        ]]>
    </select>

    <!-- 사용자의 소비 내역을 연봉 그룹 내에서 백분율로 계산(마이페이지에서 사용)   -->
    <select id="getExpensePercentileByYearlySalary" parameterType="int" resultType="int">
    <![CDATA[
        WITH salary_range AS (
            SELECT FLOOR(YEARLY_SALARY / 1000) * 1000 AS LOWER_BOUND,
                   FLOOR(YEARLY_SALARY / 1000) * 1000 + 999 AS UPPER_BOUND
            FROM MEMBER
            WHERE MEMBER_NO = #{memberNo}
        ),
             same_salary_range_employees AS (
                 SELECT M.MEMBER_NO
                 FROM MEMBER M, salary_range SR
                 WHERE M.YEARLY_SALARY BETWEEN SR.LOWER_BOUND AND SR.UPPER_BOUND
                   AND M.GRADE <> 'ADMIN'
             ),
             monthly_expenses AS (
                 SELECT AB.MEMBER_NO,
                        NVL(SUM(AB.PAYMENT_AMOUNT), 0) AS TOTAL_EXPENSE
                 FROM ACCOUNT_BOOK AB
                          JOIN same_salary_range_employees SSRE ON AB.MEMBER_NO = SSRE.MEMBER_NO
                 WHERE EXTRACT(YEAR FROM AB.CRE_DATE) = EXTRACT(YEAR FROM SYSDATE)  -- 현재 연도
                   AND EXTRACT(MONTH FROM AB.CRE_DATE) = EXTRACT(MONTH FROM SYSDATE)  -- 현재 월
                 GROUP BY AB.MEMBER_NO
             ),
             expense_stats AS (
                 SELECT
                     COUNT(*) AS TOTAL_COUNT,
                     MAX(TOTAL_EXPENSE) AS MAX_EXPENSE,
                     MIN(TOTAL_EXPENSE) AS MIN_EXPENSE
                 FROM monthly_expenses
             ),
             my_expense AS (
                 SELECT TOTAL_EXPENSE AS MY_TOTAL_EXPENSE
                 FROM monthly_expenses
                 WHERE MEMBER_NO = #{memberNo}
             ),
             my_rank AS (
                 SELECT
                     COUNT(*) AS LOWER_OR_EQUAL_COUNT
                 FROM monthly_expenses
                 WHERE TOTAL_EXPENSE <= (SELECT MY_TOTAL_EXPENSE FROM my_expense)
             )
        SELECT
            COALESCE(
                    CASE
                        WHEN ES.TOTAL_COUNT = 0 THEN NULL
                        WHEN ES.MAX_EXPENSE = ES.MIN_EXPENSE THEN 50
                        ELSE
                            ROUND(GREATEST(0, LEAST(100, ((MR.LOWER_OR_EQUAL_COUNT - 1) / (ES.TOTAL_COUNT - 1)) * 100)))
                        END,
                    0
            ) AS EXPENSE_PERCENTILE
        FROM expense_stats ES, my_rank MR
        ]]>
</select>


    <!-- 계정 찾기   -->
    <select id="findMemberAccount" parameterType="map" resultMap="memberResultMap">
        SELECT MEMBER_NO, EMAIL
        FROM MEMBER
        WHERE PHONE = #{phone}
        AND PWD = #{pwd}
    </select>

    <!-- 비밀번호 찾기 -->
    <select id="findMemberPassword" parameterType="map" resultMap="memberResultMap">
        SELECT MEMBER_NO, USER_NAME, EMAIL
        FROM MEMBER
        WHERE USER_NAME = #{userName}
          AND EMAIL = #{email}
    </select>

    <update id="updateMemberPassword" parameterType="map">
        UPDATE MEMBER
        SET PWD = #{pwd}
        WHERE MEMBER_NO = #{memberNo}
    </update>

    <select id="updateMemberPasswordCheck" parameterType="map" resultMap="memberResultMap">
        SELECT MEMBER_NO, USER_NAME, EMAIL, PWD
        FROM MEMBER
        WHERE USER_NAME = #{userName}
        AND EMAIL = #{email}
        AND PWD = #{pwd}
    </select>


    <!-- IS_DELETED가 'true'인 회원번호를 조회 스케줄용 -->
    <select id="selectDeletedMemberNos" resultType="int">
        SELECT MEMBER_NO
        FROM MEMBER
        WHERE IS_DELETED = 'true'
    </select>


</mapper>