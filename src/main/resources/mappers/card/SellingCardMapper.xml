<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.wing.sellingCard">

    <resultMap type="sellingCardVo" id="sellingCardResultMap">
        <id column="SELLING_CARD_NO" property="sellingCardNo" />
        <result column="CARD_NO" property="cardNo"/>
        <result column="MEMBER_NO" property="memberNo"/>
        <result column="MEMBER_CARD_NO" property="memberCardNo"/>
        <result column="CARD_TERMINATION" property="cardTermination"/>
        <result column="TERMINATION_REASON" property="terminationReason"/>
        <result column="TERMINATION_DATE" property="terminationDate" />
        <result column="SELLING_DATE" property="sellingDate" javaType="java.util.Date"/>
        <result column="cardRecommend" property="cardRecommend" />
        <result column="EMAIL" property="email" />
    </resultMap>

    <sql id="search">
        <if test="cardNo != null and cardNo != 0">
            SC.CARD_NO = #{cardNo}
        </if>
        <if test="termination != null and termination != 'all'">
            AND SC.CARD_TERMINATION = #{termination}
        </if>
    </sql>

    <select id="sellingCardSelectList" parameterType="map" resultMap="sellingCardResultMap">
        SELECT SELLING_CARD_NO, SELLING_DATE, cardRecommend, EMAIL, CARD_TERMINATION
        FROM (
        SELECT ROWNUM AS RNUM,
        SC.SELLING_CARD_NO,
        SC.SELLING_DATE,
        DECODE(SC.CARD_RECOMMEND, 'G', '일반', 'R', '추천', '없음') AS cardRecommend,
        M.EMAIL,
        SC.CARD_TERMINATION
        FROM SELLING_CARD SC
        JOIN MEMBER M ON SC.MEMBER_NO = M.MEMBER_NO
        <where>
            <include refid="search" />
            AND M.GRADE = 'MEMBER'
        </where>
        ORDER BY SC.SELLING_DATE DESC
        )
        WHERE RNUM BETWEEN #{start} AND #{end}
    </select>

    <select id="sellingCardSelectTotalCount" parameterType="int" resultType="int">
        SELECT COUNT(SC.SELLING_CARD_NO)
        FROM SELLING_CARD SC
        JOIN MEMBER M ON SC.MEMBER_NO = M.MEMBER_NO
        <where>
            <include refid="search" />
            AND M.GRADE = 'MEMBER'
        </where>
    </select>

    <select id="sellingCardSelectOne" parameterType="int" resultType="map">
        SELECT C.CARD_NAME AS cardName,
               M.EMAIL AS email,
               TO_CHAR(SC.SELLING_DATE, 'YYYY-MM-DD HH24:MI:SS') AS sellingDate,
               DECODE(SC.CARD_RECOMMEND, 'G', '일반', 'R', '추천', '없음') AS cardRecommend,
               SC.CARD_TERMINATION AS cardTermination,
               NVL(SC.TERMINATION_REASON, '') AS terminationReason
        FROM SELLING_CARD SC
                 JOIN CARD C ON SC.CARD_NO = C.CARD_NO
                 JOIN MEMBER M ON SC.MEMBER_NO = M.MEMBER_NO
        WHERE SELLING_CARD_NO = #{sellingCardNo}
        AND M.GRADE = 'MEMBER'
    </select>

    <select id="countActiveSellingCardsByCardNo" parameterType="int" resultType="int">
        SELECT COUNT(SC.SELLING_CARD_NO)
        FROM CARD C
        JOIN SELLING_CARD SC ON C.CARD_NO = SC.CARD_NO
        WHERE C.CARD_NO = #{cardNo}
          AND SC.TERMINATION_REASON IS NULL
          AND SC.TERMINATION_DATE IS NULL
    </select>

    <select id="memberSellingCardExist" parameterType="sellingCardVo" resultMap="sellingCardResultMap">
        SELECT SC.SELLING_CARD_NO, SC.MEMBER_CARD_NO
        FROM SELLING_CARD SC JOIN CARD C
          ON SC.CARD_NO = C.CARD_NO
        WHERE SC.MEMBER_NO = #{memberNo}
        AND SC.CARD_NO = #{cardNo}
        AND SC.TERMINATION_DATE IS NULL
        AND SC.TERMINATION_REASON IS NULL
    </select>

    <!-- 일반 구매   -->
    <insert id="memberPurchaseCard" parameterType="sellingCardVo">
        INSERT INTO SELLING_CARD (SELLING_CARD_NO, CARD_NO, MEMBER_NO, MEMBER_CARD_NO)
        VALUES (SELLING_CARD_NO_SEQ.NEXTVAL, #{cardNo}, #{memberNo}, #{memberCardNo})
    </insert>

    <!-- FIXME: 추천 카드 구매   -->
    <insert id="memberPurchaseRecommendedCard" parameterType="sellingCardVo">
        INSERT INTO SELLING_CARD (SELLING_CARD_NO, CARD_NO, MEMBER_NO, MEMBER_CARD_NO, CARD_RECOMMEND)
        VALUES (SELLING_CARD_NO_SEQ.NEXTVAL, #{cardNo}, #{memberNo}, #{memberCardNo}, 'R')
    </insert>

    <select id="memberPurchaseCardCheck" parameterType="sellingCardVo" resultMap="sellingCardResultMap">
        SELECT SELLING_CARD_NO, CARD_NO, MEMBER_NO, MEMBER_CARD_NO
        FROM SELLING_CARD
        WHERE CARD_NO = #{cardNo}
        AND MEMBER_NO = #{memberNo}
        AND MEMBER_CARD_NO = #{memberCardNo}
    </select>

    <select id="sellingCardSelectOneForUserPage" parameterType="int" resultType="map">
        SELECT SC.SELLING_CARD_NO AS sellingCardNo, C.CARD_NAME AS cardName,
               TO_CHAR(SC.SELLING_DATE, 'YYYY-MM-DD HH24:MI:SS') AS sellingDate,
               C.STORED_FILE_NAME AS storedFileName,
               C.ORIGINAL_FILE_NAME AS originalFileName,
              SC.MEMBER_CARD_NO AS memberCardNo,
                C.CARD_NO AS cardNo,
            SC.CARD_TERMINATION AS cardTermination
        FROM SELLING_CARD SC
                 JOIN CARD C ON SC.CARD_NO = C.CARD_NO
                 JOIN MEMBER M ON SC.MEMBER_NO = M.MEMBER_NO
        WHERE SC.MEMBER_NO = #{memberNo}
    </select>

    <!-- 카드 삭제 -->
    <update id="deleteCardSoft" parameterType="map">
        UPDATE SELLING_CARD
        SET MEMBER_NO = 1, CARD_TERMINATION = 'Y',
            <if test="terminationReason != null and terminationReason != ''">
                TERMINATION_REASON = #{terminationReason},
            </if>
            TERMINATION_DATE = SYSDATE
        WHERE SELLING_CARD_NO = #{sellingCardNo}
        AND MEMBER_CARD_NO = #{memberCardNo}
    </update>

    <select id="deleteCardSoftCheck" parameterType="map" resultMap="sellingCardResultMap">
        SELECT MEMBER_NO, CARD_TERMINATION, TERMINATION_REASON, TERMINATION_DATE
        FROM SELLING_CARD
        WHERE SELLING_CARD_NO = #{sellingCardNo}
      AND MEMBER_CARD_NO = #{memberCardNo}
    </select>

    <!-- 대시보드(판매 카드 수(년) - 5년 -->
    <select id="totalCardsSoldLast5Years" resultType="map">
        <![CDATA[
            SELECT EXTRACT(YEAR FROM SELLING_DATE) AS SELLING_YEAR,
            COUNT(*) AS TOTAL_CARDS_SOLD
            FROM SELLING_CARD
            WHERE EXTRACT(YEAR FROM SELLING_DATE) >= EXTRACT(YEAR FROM SYSDATE) - 4
            AND EXTRACT(YEAR FROM SELLING_DATE) <= EXTRACT(YEAR FROM SYSDATE)
            GROUP BY EXTRACT(YEAR FROM SELLING_DATE)
            ORDER BY SELLING_YEAR
        ]]>
    </select>

    <!-- 대시보드(추천상품 구매 수(년) - 5년 -->
    <select id="recommendedCardsPurchasedLast5Years" resultType="map">
        <![CDATA[
        SELECT EXTRACT(YEAR FROM SELLING_DATE) AS SELLING_YEAR,
               SUM(CASE WHEN CARD_RECOMMEND = 'R' THEN 1 ELSE 0 END) AS TOTAL_CARDS_SOLD
        FROM SELLING_CARD
        WHERE EXTRACT(YEAR FROM SELLING_DATE) >= EXTRACT(YEAR FROM SYSDATE) - 4
          AND EXTRACT(YEAR FROM SELLING_DATE) <= EXTRACT(YEAR FROM SYSDATE)
        GROUP BY EXTRACT(YEAR FROM SELLING_DATE)
        ORDER BY SELLING_YEAR
        ]]>
    </select>

    <!-- 대시보드(해지 카드 수(년) - 5년 -->
    <select id="terminatedCardsLast5Years" resultType="map">
        <![CDATA[
        SELECT EXTRACT(YEAR FROM SELLING_DATE) AS SELLING_YEAR,
               SUM(CASE WHEN CARD_TERMINATION = 'Y' THEN 1 ELSE 0 END) AS TOTAL_CARDS_SOLD
        FROM SELLING_CARD
        WHERE EXTRACT(YEAR FROM SELLING_DATE) >= EXTRACT(YEAR FROM SYSDATE) - 4
          AND EXTRACT(YEAR FROM SELLING_DATE) <= EXTRACT(YEAR FROM SYSDATE)
        GROUP BY EXTRACT(YEAR FROM SELLING_DATE)
        ORDER BY SELLING_YEAR
        ]]>
    </select>

    <select id="checkSellingCardExists" parameterType="map" resultType="int">
        SELECT COUNT(1)
        FROM SELLING_CARD
        WHERE MEMBER_NO = #{memberNo}
    </select>
</mapper>