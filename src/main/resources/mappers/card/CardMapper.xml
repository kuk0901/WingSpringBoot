<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.edu.wing.card">

    <resultMap type="cardVo" id="cardResultMap">
        <id column="CARD_NO" property="cardNo" />
        <result column="CARD_NAME" property="cardName"/>
        <result column="CARD_COMPANY" property="cardCompany"/>
        <result column="CATEGORY_NO" property="categoryNo"/>
        <result column="STORED_FILE_NAME" property="storedFileName"/>
        <result column="ORIGINAL_FILE_NAME" property="originalFileName"/>
        <result column="SUMMATION_BENEFIT" property="summationBenefit"/>
        <result column="MAIN_BENEFIT" property="mainBenefit" />
        <result column="REGISTER_DATE" property="registerDate" javaType="java.util.Date" />
        <result column="CATEGORY_NAME" property="categoryName"/>
        <result column="IS_DELETED" property="isDeleted" />
    </resultMap>

    <sql id="search">
        C.IS_DELETED = 'false'
        <if test="categoryName != null and categoryName != 'all'">
            AND CASE MC.CATEGORY_NAME
            WHEN '교통' THEN 'Traffic'
            WHEN '쇼핑' THEN 'Shopping'
            WHEN '생활' THEN 'Daily'
            ELSE MC.CATEGORY_NAME
            END = #{categoryName}
        </if>
    </sql>

    <sql id="userShowSearch">
        C.IS_DELETED = 'false'
        <![CDATA[
            AND C.REGISTER_DATE <= SYSDATE
        ]]>
        <if test="categoryName != null and categoryName != 'all'">
            AND CASE MC.CATEGORY_NAME
            WHEN '교통' THEN 'Traffic'
            WHEN '쇼핑' THEN 'Shopping'
            WHEN '생활' THEN 'Daily'
            ELSE MC.CATEGORY_NAME
            END = #{categoryName}
        </if>
    </sql>

    <select id="cardSelectList" parameterType="map" resultMap="cardResultMap">
        SELECT CARD_NO, CARD_NAME, STORED_FILE_NAME, ORIGINAL_FILE_NAME
            , REGISTER_DATE, CATEGORY_NAME
        FROM (
            SELECT CARD_NO, CARD_NAME, STORED_FILE_NAME, ORIGINAL_FILE_NAME
            , REGISTER_DATE, CATEGORY_NAME
            , ROW_NUMBER() OVER (ORDER BY REGISTER_DATE DESC, CARD_NO DESC) AS RNUM
            FROM (
                SELECT C.CARD_NO, C.CARD_NAME, C.STORED_FILE_NAME, C.ORIGINAL_FILE_NAME
                , C.REGISTER_DATE
                , CASE MC.CATEGORY_NAME
                    WHEN '교통' THEN 'Traffic'
                    WHEN '쇼핑' THEN 'Shopping'
                    WHEN '생활' THEN 'Daily'
                    ELSE MC.CATEGORY_NAME
                END AS CATEGORY_NAME
                FROM CARD C
                JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
                <where>
                    <include refid="search" />
                </where>
            )
        )
        WHERE RNUM BETWEEN #{start} AND #{end}
    </select>

    <select id="cardSelectTotalCount" parameterType="String" resultType="int">
        SELECT COUNT(CARD_NO)
        FROM CARD C JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
        <where>
            <include refid="search" />
        </where>
    </select>

    <select id="cardSelectOne" parameterType="int" resultMap="cardResultMap">
        SELECT C.CARD_NO
             , C.CARD_NAME
             , C.CARD_COMPANY
             , C.STORED_FILE_NAME
             , C.ORIGINAL_FILE_NAME
             , C.REGISTER_DATE
             , CASE MC.CATEGORY_NAME
                   WHEN '교통' THEN 'Traffic'
                   WHEN '쇼핑' THEN 'Shopping'
                   WHEN '생활' THEN 'Daily'
                   ELSE MC.CATEGORY_NAME
            END AS CATEGORY_NAME
        FROM CARD C
                 JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
        WHERE C.CARD_NO = #{cardNo}
        AND IS_DELETED = 'false'
    </select>

    <select id="cardExist" parameterType="String" resultMap="cardResultMap">
        SELECT CARD_NO, CARD_NAME, CARD_COMPANY, IS_DELETED
        FROM CARD
        WHERE CARD_NAME = #{cardName}
          AND IS_DELETED = 'false'
    </select>

    <insert id="cardInsertOne" parameterType="map">
        INSERT INTO CARD (CARD_NO, CARD_NAME, CARD_COMPANY, CATEGORY_NO, STORED_FILE_NAME, ORIGINAL_FILE_NAME, REGISTER_DATE, IS_DELETED)
        VALUES (CARD_NO_SEQ.NEXTVAL, #{cardName}, #{cardCompany}, #{categoryNo}, #{storedFileName}, #{originalFileName}, #{registerDate}, 'false')
    </insert>

    <update id="markCardAsDeleted" parameterType="int">
        UPDATE CARD
        SET IS_DELETED = 'true'
        WHERE CARD_NO = #{cardNo}
    </update>

    <select id="checkCardDeletedStatus" parameterType="int" resultMap="cardResultMap">
        SELECT CARD_NO, CARD_NAME, CARD_COMPANY, IS_DELETED
        FROM CARD
        WHERE CARD_NO = #{cardNo} AND IS_DELETED = 'true'
    </select>

    <select id="userShowCardSelectList" parameterType="map" resultMap="cardResultMap">
        SELECT CARD_NO, CARD_NAME, STORED_FILE_NAME, ORIGINAL_FILE_NAME
        , REGISTER_DATE, CATEGORY_NAME
        FROM (
        SELECT ROWNUM AS RNUM
        , C.CARD_NO
        , C.CARD_NAME
        , C.STORED_FILE_NAME
        , C.ORIGINAL_FILE_NAME
        , C.REGISTER_DATE
        , CASE MC.CATEGORY_NAME
        WHEN '교통' THEN 'Traffic'
        WHEN '쇼핑' THEN 'Shopping'
        WHEN '생활' THEN 'Daily'
        ELSE MC.CATEGORY_NAME
        END AS CATEGORY_NAME
        FROM CARD C
        JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
        <where>
            <include refid="userShowSearch" />
        </where>
        ORDER BY C.REGISTER_DATE DESC
        )
        WHERE RNUM BETWEEN #{start} AND #{end}
    </select>

    <select id="userShowCardSelectTotalCount" parameterType="String" resultType="int">
        SELECT COUNT(CARD_NO)
        FROM CARD C JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
        <where>
            <include refid="userShowSearch" />
        </where>
    </select>

    <!-- 카드 추천 로직, 마이페이지에서 사용 -->
    <select id="userRecommendCardSelect" parameterType="int" resultType="map">
        <![CDATA[
        WITH member_check AS (
            SELECT CASE
                       WHEN GRADE = 'MEMBER' AND PRODUCT_PURCHASE = 'N' THEN 1
                       ELSE 0
                       END AS is_eligible
            FROM MEMBER
            WHERE MEMBER_NO = #{memberNo}
        ),
             monthly_counts AS (
                 SELECT TO_CHAR(TRUNC(CRE_DATE, 'MM'), 'YYYY-MM') AS month,
                        MINUS_CATEGORY_NO,
                        COUNT(*) AS category_count,
                        ROW_NUMBER() OVER (PARTITION BY TRUNC(CRE_DATE, 'MM') ORDER BY COUNT(*) DESC) AS rn
                 FROM ACCOUNT_BOOK
                 WHERE MEMBER_NO = #{memberNo}
                   AND CRE_DATE >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -3)
                   AND CRE_DATE < TRUNC(SYSDATE, 'MM')
                 GROUP BY TRUNC(CRE_DATE, 'MM'), MINUS_CATEGORY_NO
             ),
             top_categories AS (
                 SELECT month, MINUS_CATEGORY_NO, category_count
                 FROM monthly_counts
                 WHERE rn = 1
             ),
             recommended_category AS (
                 SELECT CASE
                            WHEN COUNT(DISTINCT MINUS_CATEGORY_NO) = 1 AND COUNT(*) = 3 THEN MAX(MINUS_CATEGORY_NO)
                            ELSE 0
                            END AS recommended_category
                 FROM top_categories
             ),
             recommended_card AS (
                 SELECT C.CARD_NO, C.CARD_NAME, MC.CATEGORY_NAME
                 FROM CARD C
                          JOIN recommended_category RC ON C.CATEGORY_NO = RC.recommended_category
                          CROSS JOIN member_check MCH
                          JOIN MINUS_CATEGORY MC ON C.CATEGORY_NO = MC.CATEGORY_NO
                 WHERE RC.recommended_category != 0
                   AND MCH.is_eligible = 1
                   AND C.IS_DELETED = 'false'
             )
        SELECT RC.recommended_category AS categoryNo,
               COALESCE(RCARD.CARD_NO, 0) AS cardNo,
               COALESCE(RCARD.CARD_NAME, 'No Recommendation') AS cardName,
               COALESCE(RCARD.CATEGORY_NAME, 'Unknown Category') AS categoryName
        FROM recommended_category RC
                 LEFT JOIN recommended_card RCARD ON 1=1
        ]]>
    </select>
</mapper>